from datetime import datetime


def build_ducky_script(actions, payloads=None, obfuscation_method=None, delay_seconds=0):
    """
    Generate a complete Ducky Script from recorded user actions and payload modules.
    """
    lines = []
    lines.append("REM Generated by ShadowSim")
    lines.append(f"REM Timestamp: {datetime.now().isoformat()}")
    lines.append(f"DEFAULT_DELAY {int(delay_seconds * 1000) if delay_seconds else 200}")
    lines.append("")

    lines += [
        "GUI r",
        "DELAY 200",
        "STRING powershell",
        "ENTER",
        "DELAY 200"
    ]

    if payloads:
        ps1_script = build_ps1_stub_from_payloads(payloads, obfuscation_method, delay_seconds)
        lines += duckify_ps1_script(ps1_script)

    seen_clicks = set()
    for action in actions:
        if action["type"] == "mouse_click":
            pos = tuple(action.get("position", (None, None)))
            if pos not in seen_clicks:
                seen_clicks.add(pos)
                x, y = pos
                lines.append(f"REM Mouse click at ({x},{y}) â€” not scriptable")

        elif action["type"] == "keystroke_sequence":
            raw = action.get("sequence", "")
            lines.append(f"STRING {sanitize_string(raw)}")
            lines.append("ENTER")

        elif action["type"] == "run_program":
            prog = sanitize_string(action.get("program", "cmd.exe"))
            lines += ["GUI r", "DELAY 300", f"STRING {prog}", "ENTER"]

        elif action["type"] == "cli_command":
            cmd = sanitize_string(action.get("command", ""))
            lines.append(f"STRING {cmd}")
            lines.append("ENTER")
        
        elif action["type"] == "hotkey":
            keys = action.get("keys", [])
            if "ALT" in keys and "F4" in keys:
                lines.append("ALT F4")

        else:
            lines.append(f"REM Unknown action: {action}")

    return "\n".join(lines)


def sanitize_string(s: str) -> str:
    return s.replace("{", "\\{").replace("}", "\\}").strip()

def duckify_ps1_script(ps1_script: str, delay_per_line=200) -> list:
    """
    Converts PowerShell script into Ducky script (line-by-line).
    """
    ducky_lines = []
    for line in ps1_script.splitlines():
        line = line.strip()
        if not line or line.startswith("#"):
            continue

        safe = sanitize_string(line)
        while len(safe) > 100:
            ducky_lines.append(f"STRING {safe[:100]}")
            ducky_lines.append("ENTER")
            ducky_lines.append(f"DELAY {delay_per_line}")
            safe = safe[100:]

        ducky_lines.append(f"STRING {safe}")
        ducky_lines.append("ENTER")
        ducky_lines.append(f"DELAY {delay_per_line}")
    return ducky_lines


def build_ps1_stub_from_payloads(payloads, obfuscation_method=None, delay_seconds=0):
    """
    Generate the PS1 logic only (same as script_gen but returns string).
    """
    from core.script_gen import build_script
    return build_script([], payloads, obfuscation_method, delay_seconds)
